{"version":3,"sources":["components/TypographyTransitions.js","pages/HomePage.js","pages/MazeGamePage.js","App.js","serviceWorker.js","index.js"],"names":["typographyStyles","makeStyles","root","color","TypographyFade","props","delay","timeout","other","Object","objectWithoutProperties","classes","react_default","a","createElement","Fade","in","style","transitionDelay","Typography","assign","className","cursor","show","blink","element","hideWhenDone","hideWhenDoneDelay","TypographyTyped","Typist_default","avgTypingDelay","startDelay","HomePage","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","height","setState","objectSpread","window","innerHeight","Grid","container","justify","direction","padding","justifyContent","width","innerWidth","item","align","variant","Component","MazeGamePage","phaser_maze_game_default","App","react_router_dom","basename","process","react_router","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAQMA,UAAmBC,YAAW,CAClCC,KAAM,CAEJC,MAAO,cASJ,SAASC,EAAeC,GAAO,IAC5BC,EAA6BD,EAA7BC,MAAOC,EAAsBF,EAAtBE,QAAYC,EADSC,OAAAC,EAAA,EAAAD,CACCJ,EADD,qBAE9BM,EAAUX,IAChB,OACEY,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,IAAE,EAACC,MAAO,CAAEC,gBAAiBZ,GAASC,QAASA,GACnDK,EAAAC,EAAAC,cAACK,EAAA,EAADV,OAAAW,OAAA,CAAYC,UAAWV,EAAQT,MAAUM,KAS/C,IAAMc,EAAS,CACbC,MAAM,EACNC,OAAO,EACPC,QAAS,IACTC,cAAc,EACdC,kBAAmB,KAGd,SAASC,EAAgBvB,GAAO,IAC7BC,EAAoBD,EAApBC,MAAUE,EADmBC,OAAAC,EAAA,EAAAD,CACTJ,EADS,WAE/BM,EAAUX,IAChB,OACEY,EAAAC,EAAAC,cAACK,EAAA,EAADV,OAAAW,OAAA,CAAYC,UAAWV,EAAQT,MAAUM,GACvCI,EAAAC,EAAAC,cAACe,EAAAhB,EAADJ,OAAAW,OAAA,CACEU,eAAgB,GAChBR,OAAQA,EACRS,WAAYzB,GACRE,SCGGwB,cA7Cb,SAAAA,EAAY3B,GAAO,IAAA4B,EAAA,OAAAxB,OAAAyB,EAAA,EAAAzB,CAAA0B,KAAAH,IACjBC,EAAAxB,OAAA2B,EAAA,EAAA3B,CAAA0B,KAAA1B,OAAA4B,EAAA,EAAA5B,CAAAuB,GAAAM,KAAAH,KAAM9B,KACDkC,MAAQ,CACXC,OAAQnC,EAAMmC,QAHCP,mFAQjBE,KAAKM,SAALhC,OAAAiC,EAAA,EAAAjC,CAAA,GACK0B,KAAKI,MADV,CAEEC,OAAQG,OAAOC,gDAKjB,OACEhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CACEC,WAAS,EAETC,QAAQ,SACRC,UAAU,SACV/B,MAAO,CACLgC,QAAS,MACTC,eAAgB,WAChBV,OAAQG,OAAOC,YACfO,MAAOR,OAAOS,aAGhBxC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAMQ,MAAI,GACRzC,EAAAC,EAAAC,cAACV,EAAD,CAAgBkD,MAAM,OAAOC,QAAQ,KAAKhD,QAAS,KAChD,aAEHK,EAAAC,EAAAC,cAACc,EAAD,CAAiB0B,MAAM,OAAOhD,MAAO,IAAKiD,QAAQ,MAC/C,2CAlCUC,+BCSRC,mLAXX,OACE7C,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAM5B,MAAO,CAAEgC,QAAS,KAItBrC,EAAAC,EAAAC,cAAC4C,EAAA7C,EAAD,cAPmB2C,aCeZG,4LAXX,OACE/C,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAeC,SAAUC,YACvBlD,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACbT,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWlC,IACjCpB,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CAAOE,KAAK,QAAQC,UAAWT,aANvBD,cCMEW,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9af51aeb.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/styles';\nimport { Fade, Typography } from '@material-ui/core';\nimport Typist from 'react-typist';\nimport 'react-typist/dist/Typist.css';\n\n// Define the styling for all the Typography components with transitions here\nconst typographyStyles = makeStyles({\n  root: {\n    // color: '#2088FF',\n    color: '#555555'\n  }\n});\n\nTypographyFade.propTypes = {\n  delay: PropTypes.number,\n  timeout: PropTypes.number\n};\n\nexport function TypographyFade(props) {\n  const { delay, timeout, ...other } = props;\n  const classes = typographyStyles();\n  return (\n    <Fade in style={{ transitionDelay: delay }} timeout={timeout}>\n      <Typography className={classes.root} {...other} />\n    </Fade>\n  );\n}\n\nTypographyTyped.propTypes = {\n  delay: PropTypes.number\n};\n\nconst cursor = {\n  show: true,\n  blink: true,\n  element: '|',\n  hideWhenDone: true,\n  hideWhenDoneDelay: 8000\n};\n\nexport function TypographyTyped(props) {\n  const { delay, ...other } = props;\n  const classes = typographyStyles();\n  return (\n    <Typography className={classes.root} {...other}>\n      <Typist\n        avgTypingDelay={35}\n        cursor={cursor}\n        startDelay={delay}\n        {...other}\n      />\n    </Typography>\n  );\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid } from '@material-ui/core/';\nimport {\n  TypographyFade,\n  TypographyTyped\n} from '../components/TypographyTransitions';\n\nclass HomePage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      height: props.height\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      ...this.state,\n      height: window.innerHeight\n    });\n  }\n\n  render() {\n    return (\n      <Grid\n        container\n        // alignItems=\"center\"\n        justify=\"center\"\n        direction=\"column\"\n        style={{\n          padding: '5vw',\n          justifyContent: 'flex-end',\n          height: window.innerHeight,\n          width: window.innerWidth\n        }}\n      >\n        <Grid item>\n          <TypographyFade align=\"left\" variant=\"h1\" timeout={500}>\n            {'Henry Wee'}\n          </TypographyFade>\n          <TypographyTyped align=\"left\" delay={500} variant=\"h3\">\n            {'> Software Engineering Student'}\n          </TypographyTyped>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nHomePage.propTypes = {\n  height: PropTypes.number\n};\n\nexport default HomePage;\n","import React, { Component } from 'react';\nimport Game from 'phaser-maze-game';\nimport { Grid } from '@material-ui/core/';\n\nclass MazeGamePage extends Component {\n  render() {\n    return (\n      <Grid style={{ padding: 25 }}>\n        {/* <Typography variant=\"h2\" gutterBottom>\n          Maze Game\n        </Typography> */}\n        <Game />\n      </Grid>\n    );\n  }\n}\n\nexport default MazeGamePage;\n","import React, { Component } from 'react';\nimport { Route, BrowserRouter } from 'react-router-dom';\nimport HomePage from './pages/HomePage';\nimport MazeGamePage from './pages/MazeGamePage';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n          <Route exact path=\"/\" component={HomePage} />\n          <Route path=\"/game\" component={MazeGamePage} />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}