{"version":3,"sources":["Phaser/Scenes/TestScene.js","Phaser/Game.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["TestScene","this","load","setBaseURL","image","console","log","add","emitter","particles","createEmitter","speed","scale","start","end","blendMode","logo","physics","setVelocity","setBounce","setCollideWorldBounds","startFollow","Phaser","Scene","React","Component","App","react_default","a","createElement","className","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"mOAEqBA,oLAEjBC,KAAKC,KAAKC,WAAW,yBAErBF,KAAKC,KAAKE,MAAM,MAAO,2BACvBH,KAAKC,KAAKE,MAAM,OAAQ,mCACxBH,KAAKC,KAAKE,MAAM,MAAO,6DAIvBC,QAAQC,IAAIL,MAEZA,KAAKM,IAAIH,MAAM,IAAK,IAAK,OAEzB,IAEII,EAFYP,KAAKM,IAAIE,UAAU,OAEXC,cAAc,CACpCC,MAAO,IACPC,MAAO,CAAEC,MAAO,EAAGC,IAAK,GACxBC,UAAW,QAGTC,EAAOf,KAAKgB,QAAQV,IAAIH,MAAM,IAAK,IAAK,QAE5CY,EAAKE,YAAY,IAAK,KACtBF,EAAKG,UAAU,EAAG,GAClBH,EAAKI,uBAAsB,GAE3BZ,EAAQa,YAAYL,4CA5BeM,IAAOC,UCEZC,IAAMC,2BCoBzBC,4LAjBX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKf,IAAMc,UAAU,WAAWE,IAAI,SACzCL,EAAAC,EAAAC,cAAA,wCANQJ,cCOEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,oCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.1fd729b2.chunk.js","sourcesContent":["import Phaser from 'phaser';\n\nexport default class TestScene extends Phaser.Scene {\n  preload() {\n    this.load.setBaseURL('http://labs.phaser.io');\n\n    this.load.image('sky', 'assets/skies/space3.png');\n    this.load.image('logo', 'assets/sprites/phaser3-logo.png');\n    this.load.image('red', 'assets/particles/red.png');\n  }\n\n  create() {\n    console.log(this);\n\n    this.add.image(400, 300, 'sky');\n\n    var particles = this.add.particles('red');\n\n    var emitter = particles.createEmitter({\n      speed: 100,\n      scale: { start: 1, end: 0 },\n      blendMode: 'ADD'\n    });\n\n    var logo = this.physics.add.image(400, 100, 'logo');\n\n    logo.setVelocity(100, 200);\n    logo.setBounce(1, 1);\n    logo.setCollideWorldBounds(true);\n\n    emitter.startFollow(logo);\n  }\n\n  update() {\n    // console.log(\"TestScene: update\")\n  }\n}\n","import React from 'react';\nimport Phaser from 'phaser';\nimport TestScene from './Scenes/TestScene';\n\nexport default class Game extends React.Component {\n  componentDidMount() {\n    const config = {\n      type: Phaser.AUTO,\n      parent: 'phaser-parent',\n      pixelArt: true,\n      width: 800,\n      height: 600,\n      physics: {\n        default: 'arcade',\n        arcade: {\n          gravity: { y: 200 }\n        }\n      },\n      scene: [TestScene]\n    };\n\n    new Phaser.Game(config);\n  }\n\n  render() {\n    return <div id=\"phaser-parent\" />;\n  }\n}\n","import React, { Component } from 'react';\nimport Game from './Phaser/Game';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            React Website?!?!?\n          </p>\n        </header>\n        {/* <div>Phaser Game</div> */}\n        {/* <phaserMain /> */}\n        {/* <Game /> */}\n        {/* <div>Hello again</div> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}