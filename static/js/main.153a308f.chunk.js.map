{"version":3,"sources":["logo.svg","Phaser/Scenes/TestScene.js","Phaser/Scenes/Movement.js","Phaser/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TestScene","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","load","setBaseURL","image","_this","console","log","add","emitter","particles","createEmitter","speed","scale","start","end","blendMode","logo","physics","setVelocity","setBounce","setCollideWorldBounds","startFollow","input","keyboard","addKey","on","event","scene","Phaser","Scene","Movement","sprite","direction","y","x","cameras","main","setBackgroundColor","counter","keys","addKeys","up","down","left","right","player","isDown","updateMovement","Game","config","type","AUTO","parent","pixelArt","width","height","default","arcade","gravity","react_default","a","createElement","id","React","Component","App","className","Game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.153a308f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import Phaser from 'phaser';\n\nexport default class TestScene extends Phaser.Scene {\n  constructor() {\n    super('TestScene'); // Set the key name\n  }\n\n  preload() {\n    this.load.setBaseURL(\n      'https://raw.githubusercontent.com/wjxhenry/website/master'\n    );\n    // this.load.setBaseURL('https://labs.phaser.io');\n\n    this.load.image('sky', 'assets/test/space3.png');\n    this.load.image('logo', 'assets/test/phaser3-logo.png');\n    this.load.image('red', 'assets/test/red.png');\n    // this.load.image('sky', 'assets/skies/space3.png');\n    // this.load.image('logo', 'assets/sprites/phaser3-logo.png');\n    // this.load.image('red', 'assets/particles/red.png');\n  }\n\n  create() {\n    console.log(this);\n\n    this.add.image(400, 300, 'sky');\n\n    var particles = this.add.particles('red');\n\n    var emitter = particles.createEmitter({\n      speed: 100,\n      scale: { start: 1, end: 0 },\n      blendMode: 'ADD'\n    });\n\n    var logo = this.physics.add.image(400, 100, 'logo');\n\n    logo.setVelocity(100, 200);\n    logo.setBounce(1, 1);\n    logo.setCollideWorldBounds(true);\n\n    emitter.startFollow(logo);\n\n    var keyObj = this.input.keyboard.addKey('Enter');\n    keyObj.on('down', event => {\n      console.log('Enter key down');\n      console.log('Start \"Movement\" scene');\n      this.scene.start('Movement');\n    });\n    // keyObj.on('up', event => {\n    //   console.log('Enter key up');\n    // });\n  }\n\n  update() {\n    // console.log(\"TestScene: update\")\n  }\n}\n","import Phaser from 'phaser';\n\nexport default class Movement extends Phaser.Scene {\n  constructor() {\n    super('Movement');\n  }\n\n  updateMovement(sprite, direction) {\n    if (direction === 'up') {\n      sprite.y -= 2;\n      if (sprite.y < 0) {\n        sprite.y = 0;\n      }\n    } else if (direction === 'down') {\n      sprite.y += 2;\n      if (sprite.y > 600) {\n        sprite.y = 600;\n      }\n    } else if (direction === 'left') {\n      sprite.x -= 2;\n      if (sprite.x < 0) {\n        sprite.x = 0;\n      }\n    } else if (direction === 'right') {\n      sprite.x += 2;\n      if (sprite.x > 800) {\n        sprite.x = 800;\n      }\n    }\n  }\n\n  // redrawRect(prevPos, newPos, drawGraphics, redrawGraphics) {\n  //   let prevRect = new Phaser.Geom.Rectangle(prevPos.x, prevPos.y, 20, 20);\n  //   let newRect = new Phaser.Geom.Rectangle(newPos.x, newPos.y, 20, 20);\n  //   redrawGraphics.fillRectShape(prevRect);\n  //   drawGraphics.fillRectShape(newRect);\n  // }\n\n  preload() {\n    this.load.setBaseURL(\n      'https://raw.githubusercontent.com/wjxhenry/website/master'\n    );\n    // Load assets\n    this.load.image('player', 'assets/test/red.png');\n  }\n\n  create() {\n    // this.cameras.main.setBackgroundColor('rgba(125,0,255,1)'); // Set rgb background colour\n    // this.cameras.main.setBackgroundColor('#800080');\n    this.cameras.main.setBackgroundColor('#ffffff');\n    this.counter = 0;\n    this.keys = this.input.keyboard.addKeys({\n      up: 'W',\n      down: 'S',\n      left: 'A',\n      right: 'D'\n    });\n    // this.playerPos = { x: 0, y: 0 };\n    var keyObj = this.input.keyboard.addKey('ESC');\n    keyObj.on('down', event => {\n      //   this.scene.start(\"TestScene\")\n      //   Fix the issue where there are multiple logs??\n    });\n    this.player = this.add.sprite(0, 0, 'player');\n\n    // keyObj.on('up', event => {\n    //   console.log('W key up');\n    // });\n  }\n\n  update() {\n    this.counter++;\n    if (this.counter % 1 === 0) {\n      // Clock updates every 60 seconds\n      // console.log(\"Tick\")\n      this.counter = 0; // Reset counter (just in case of overflow?)\n      if (this.keys.up.isDown) {\n        console.log('Up');\n        this.updateMovement(this.player, 'up');\n      }\n      if (this.keys.down.isDown) {\n        console.log('Down');\n        this.updateMovement(this.player, 'down');\n      }\n      if (this.keys.left.isDown) {\n        console.log('Left');\n        this.updateMovement(this.player, 'left');\n      }\n      if (this.keys.right.isDown) {\n        console.log('Right');\n        this.updateMovement(this.player, 'right');\n      }\n      // console.log(this.playerPos);\n    }\n    // console.log(\"TestScene: update\")\n  }\n}\n","import React from 'react';\nimport Phaser from 'phaser';\nimport TestScene from './Scenes/TestScene';\nimport Movement from './Scenes/Movement';\n\nexport default class Game extends React.Component {\n  componentDidMount() {\n    const config = {\n      type: Phaser.AUTO,\n      parent: 'phaser-parent',\n      pixelArt: true,\n      width: 800,\n      height: 600,\n      physics: {\n        default: 'arcade',\n        arcade: {\n          gravity: { y: 200 }\n        }\n      },\n      scene: [TestScene, Movement]\n    };\n\n    new Phaser.Game(config);\n  }\n\n  render() {\n    return <div id=\"phaser-parent\" />;\n  }\n}\n","import React, { Component } from 'react';\nimport Game from './Phaser/Game';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        {/* <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            React Website?!?!?\n          </p>\n        </header> */}\n        <div>Phaser Game</div>\n        {/* <phaserMain /> */}\n        <Game />\n        {/* <div>Hello again</div> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}